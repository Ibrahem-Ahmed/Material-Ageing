*----------------------------------------------------------------------*
***INCLUDE ZMM_MAGE_FORM.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  ALV_DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ALV_DISPLAY .
   "DISPLAY ALV
    CALL METHOD cl_salv_table=>factory
    IMPORTING
      r_salv_table = gr_alv
    CHANGING
      t_table      = IT_OUT.

"status
    gr_alv->set_screen_status(
      pfstatus = 'ZSALV_STANDARD1'
      report = sy-repid
*      i_save = 'A'
      set_functions = gr_alv->c_functions_all ).


"SET COLOMN
  gr_columns = gr_alv->get_columns( ).
  gr_columns->SET_OPTIMIZE( ).
"SET KEY
  gr_column ?= gr_columns->get_column( 'MATNR' ).
  GR_COLUMN->SET_KEY( abap_true ).
"sort
  gr_sorts = gr_alv->GET_SORTS( ).
  gr_sorts->ADD_SORT( 'MATNR' ) .
  gr_sorts->ADD_SORT( 'MAKTX' ) .

colorq-COL = 7.
colorq-INV = 0.
colorq-INT = 0.

colorv-COL = 5.
colorv-INV = 0.
colorv-INT = 0.

  gr_column ?= gr_columns->get_column( 'LBKUM_30' ).
  GR_COLUMN->SET_SHORT_TEXT( '00-30' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '00-30' ).
  GR_COLUMN->SET_LONG_TEXT( '00-30' ).
  GR_COLUMN->SET_COLOR( colorq ).
  gr_column ?= gr_columns->get_column( 'SALK3_30' ).
  GR_COLUMN->SET_SHORT_TEXT( '00-30 V' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '00-30 Value' ).
  GR_COLUMN->SET_LONG_TEXT( '00-30 Value' ).
  GR_COLUMN->SET_COLOR( colorv ).

  gr_column ?= gr_columns->get_column( 'LBKUM_60' ).
  GR_COLUMN->SET_SHORT_TEXT( '31-60' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '31-60' ).
  GR_COLUMN->SET_LONG_TEXT( '31-60' ).
  GR_COLUMN->SET_COLOR( colorq ).
  gr_column ?= gr_columns->get_column( 'SALK3_60' ).
  GR_COLUMN->SET_SHORT_TEXT( '31-60 V' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '31-60 Value' ).
  GR_COLUMN->SET_LONG_TEXT( '31-60 Value' ).
  GR_COLUMN->SET_COLOR( colorv ).

  gr_column ?= gr_columns->get_column( 'LBKUM_90' ).
  GR_COLUMN->SET_SHORT_TEXT( '61-90' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '61-90' ).
  GR_COLUMN->SET_LONG_TEXT( '61-90' ).
  GR_COLUMN->SET_COLOR( colorq ).
  gr_column ?= gr_columns->get_column( 'SALK3_90' ).
  GR_COLUMN->SET_SHORT_TEXT( '61-90 V' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '61-90 Value' ).
  GR_COLUMN->SET_LONG_TEXT( '61-90 Value' ).
  GR_COLUMN->SET_COLOR( colorv ).

  gr_column ?= gr_columns->get_column( 'LBKUM_120' ).
  GR_COLUMN->SET_SHORT_TEXT( '91-120' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '91-120' ).
  GR_COLUMN->SET_LONG_TEXT( '91-120' ).
  GR_COLUMN->SET_COLOR( colorq ).
  gr_column ?= gr_columns->get_column( 'SALK3_120' ).
  GR_COLUMN->SET_SHORT_TEXT( '91-120 V' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '91-120 Value' ).
  GR_COLUMN->SET_LONG_TEXT( '91-120 Value' ).
  GR_COLUMN->SET_COLOR( colorv ).

  gr_column ?= gr_columns->get_column( 'LBKUM_150' ).
  GR_COLUMN->SET_SHORT_TEXT( '121-150' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '121-150' ).
  GR_COLUMN->SET_LONG_TEXT( '121-150' ).
  GR_COLUMN->SET_COLOR( colorq ).
  gr_column ?= gr_columns->get_column( 'SALK3_150' ).
  GR_COLUMN->SET_SHORT_TEXT( '121-150 V' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '121-150 Value' ).
  GR_COLUMN->SET_LONG_TEXT( '121-150 Value' ).
  GR_COLUMN->SET_COLOR( colorv ).

  gr_column ?= gr_columns->get_column( 'LBKUM_180' ).
  GR_COLUMN->SET_SHORT_TEXT( '151-180' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '151-180' ).
  GR_COLUMN->SET_LONG_TEXT( '151-180' ).
  GR_COLUMN->SET_COLOR( colorq ).
  gr_column ?= gr_columns->get_column( 'SALK3_180' ).
  GR_COLUMN->SET_SHORT_TEXT( '151-180 V' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '151-180 Value' ).
  GR_COLUMN->SET_LONG_TEXT( '151-180 Value' ).
  GR_COLUMN->SET_COLOR( colorv ).

  gr_column ?= gr_columns->get_column( 'LBKUM_360' ).
  GR_COLUMN->SET_SHORT_TEXT( '181-360' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '181-360' ).
  GR_COLUMN->SET_LONG_TEXT( '181-360' ).
  GR_COLUMN->SET_COLOR( colorq ).
  gr_column ?= gr_columns->get_column( 'SALK3_360' ).
  GR_COLUMN->SET_SHORT_TEXT( '181-360 V' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '181-360 Value' ).
  GR_COLUMN->SET_LONG_TEXT( '181-360 Value' ).
  GR_COLUMN->SET_COLOR( colorv ).

  gr_column ?= gr_columns->get_column( 'LBKUM_999' ).
  GR_COLUMN->SET_SHORT_TEXT( '361-999' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '361-999' ).
  GR_COLUMN->SET_LONG_TEXT( '361-999' ).
  GR_COLUMN->SET_COLOR( colorq ).
  gr_column ?= gr_columns->get_column( 'SALK3_999' ).
  GR_COLUMN->SET_SHORT_TEXT( '361-999 V' ).
  GR_COLUMN->SET_MEDIUM_TEXT( '361-999 Value' ).
  GR_COLUMN->SET_LONG_TEXT( '361-999 Value' ).
  GR_COLUMN->SET_COLOR( colorv ).

  IF P_EXTEND = 'X'.
    gr_column ?= gr_columns->get_column( 'LBKUM_1Y6M' ).
    GR_COLUMN->SET_SHORT_TEXT( '361-1Y6M' ).
    GR_COLUMN->SET_MEDIUM_TEXT( '361-1Y6M' ).
    GR_COLUMN->SET_LONG_TEXT( '361-1Y6M' ).
    GR_COLUMN->SET_COLOR( colorq ).
    gr_column ?= gr_columns->get_column( 'SALK3_1Y6M' ).
    GR_COLUMN->SET_SHORT_TEXT( '361-1Y6M V' ).
    GR_COLUMN->SET_MEDIUM_TEXT( '361-1Y6M Value' ).
    GR_COLUMN->SET_LONG_TEXT( '361-1Y6M Value' ).
    GR_COLUMN->SET_COLOR( colorv ).

    gr_column ?= gr_columns->get_column( 'LBKUM_2Y' ).
    GR_COLUMN->SET_SHORT_TEXT( '1Y6M-2Y' ).
    GR_COLUMN->SET_MEDIUM_TEXT( '1Y6M-2Y' ).
    GR_COLUMN->SET_LONG_TEXT( '1Y6M-2Y' ).
    GR_COLUMN->SET_COLOR( colorq ).
    gr_column ?= gr_columns->get_column( 'SALK3_2Y' ).
    GR_COLUMN->SET_SHORT_TEXT( '1Y6M-2Y V' ).
    GR_COLUMN->SET_MEDIUM_TEXT( '1Y6M-2Y Value' ).
    GR_COLUMN->SET_LONG_TEXT( '1Y6M-2Y Value' ).
    GR_COLUMN->SET_COLOR( colorv ).

    gr_column ?= gr_columns->get_column( 'LBKUM_2Y6M' ).
    GR_COLUMN->SET_SHORT_TEXT( '2Y-2Y6M' ).
    GR_COLUMN->SET_MEDIUM_TEXT( '2Y-2Y6M' ).
    GR_COLUMN->SET_LONG_TEXT( '2Y-2Y6M' ).
    GR_COLUMN->SET_COLOR( colorq ).
    gr_column ?= gr_columns->get_column( 'SALK3_2Y6M' ).
    GR_COLUMN->SET_SHORT_TEXT( '2Y-2Y6M V' ).
    GR_COLUMN->SET_MEDIUM_TEXT( '2Y-2Y6M Value' ).
    GR_COLUMN->SET_LONG_TEXT( '2Y-2Y6M Value' ).
    GR_COLUMN->SET_COLOR( colorv ).

    gr_column ?= gr_columns->get_column( 'LBKUM_999' ).
    GR_COLUMN->SET_SHORT_TEXT( '2Y6M-999' ).
    GR_COLUMN->SET_MEDIUM_TEXT( '2Y6M-999' ).
    GR_COLUMN->SET_LONG_TEXT( '2Y6M-999' ).
    GR_COLUMN->SET_COLOR( colorq ).
    gr_column ?= gr_columns->get_column( 'SALK3_999' ).
    GR_COLUMN->SET_SHORT_TEXT( '2Y6M-999 V' ).
    GR_COLUMN->SET_MEDIUM_TEXT( '2Y6M-999 Value' ).
    GR_COLUMN->SET_LONG_TEXT( '2Y6M-999 Value' ).
    GR_COLUMN->SET_COLOR( colorv ).
  ELSE.
    gr_column ?= gr_columns->get_column( 'LBKUM_1Y6M' ).
    GR_COLUMN->SET_VISIBLE( value = if_salv_c_bool_sap=>false ).
    gr_column ?= gr_columns->get_column( 'SALK3_1Y6M' ).
    GR_COLUMN->SET_VISIBLE( value = if_salv_c_bool_sap=>false ).

    gr_column ?= gr_columns->get_column( 'LBKUM_2Y' ).
    GR_COLUMN->SET_VISIBLE( value = if_salv_c_bool_sap=>false ).
    gr_column ?= gr_columns->get_column( 'SALK3_2Y' ).
    GR_COLUMN->SET_VISIBLE( value = if_salv_c_bool_sap=>false ).

    gr_column ?= gr_columns->get_column( 'LBKUM_2Y6M' ).
    GR_COLUMN->SET_VISIBLE( value = if_salv_c_bool_sap=>false ).
    gr_column ?= gr_columns->get_column( 'SALK3_2Y6M' ).
    GR_COLUMN->SET_VISIBLE( value = if_salv_c_bool_sap=>false ).

  ENDIF.
"Layout
 restrict = if_salv_c_layout=>RESTRICT_USER_DEPENDANT.
 gr_layout  = gr_alv->get_layout( ). "layouts
 gs_key-REPORT = sy-repid.
 gr_layout->set_key( gs_key ).  "Pass Program Name
 gr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ). "User can save
 gr_layout->set_default( abap_true ).

gr_functions = gr_alv->get_functions( ).
 gr_functions->set_group_filter( value = if_salv_c_bool_sap=>TRUE ).
* Set print preview
gr_functions->set_print_preview( ).

gr_alv->get_display_settings( ).

  gr_alv->display( ).
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PROCESS_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM PROCESS_DATA .
*  DATA IT_PRIC TYPE TABLE OF MBEW.
*  DATA WA_PRIC TYPE MBEW.
*  DATA TMP_PRIC TYPE P LENGTH 12 DECIMALS 7.

*  SELECT *
*    FROM MBEW
*    INTO TABLE IT_PRIC.

DESCRIBE TABLE IT_OUT LINES COUNT.

LOOP AT IT_OUT ASSIGNING <OUT>.
  CLEAR : WA_0030, WA_3160, WA_6190, WA_181360, WA_6190, WA_91120, WA_121150, WA_151180,
          TMP_60, TMP_90, TMP_120, TMP_150, TMP_180, TMP_360, TMP_1Y6M, TMP_2Y, TMP_2Y6M, TMP_999,
          TMP_60V, TMP_90V, TMP_120V, TMP_150V, TMP_180V, TMP_360V, TMP_1Y6MV,TMP_2YV,TMP_2Y6MV,TMP_999V." WA_PRIC, TMP_PRIC.
*****************************************************************************************
*      SET STATUS
*****************************************************************************************
    CONCATENATE 'Processing Material' <OUT>-MATNR into msg SEPARATED BY space.
    PERCE = SY-TABIX / COUNT * 100.
    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
     EXPORTING
       PERCENTAGE       = PERCE
       TEXT             = msg.

    "exit if current stock = 0
    IF <OUT>-LBKUM = 0.
      CONTINUE.
    ENDIF.

    READ TABLE IT_0030    INTO WA_0030    WITH KEY MATNR = <OUT>-MATNR WERKS = <OUT>-WERKS.
    <OUT>-LBKUM_30 = WA_0030-LBKUM.
    <OUT>-SALK3_30 = WA_0030-SALK3.
    READ TABLE IT_3160    INTO WA_3160    WITH KEY MATNR = <OUT>-MATNR WERKS = <OUT>-WERKS.
    READ TABLE IT_6190    INTO WA_6190    WITH KEY MATNR = <OUT>-MATNR WERKS = <OUT>-WERKS.
    READ TABLE IT_91120   INTO WA_91120   WITH KEY MATNR = <OUT>-MATNR WERKS = <OUT>-WERKS.
    READ TABLE IT_121150   INTO WA_121150   WITH KEY MATNR = <OUT>-MATNR WERKS = <OUT>-WERKS.
    READ TABLE IT_151180   INTO WA_151180   WITH KEY MATNR = <OUT>-MATNR WERKS = <OUT>-WERKS.
    READ TABLE IT_181360  INTO WA_181360  WITH KEY MATNR = <OUT>-MATNR WERKS = <OUT>-WERKS.
    IF P_EXTEND = 'X'.
      READ TABLE IT_1Y_1Y6M INTO WA_1Y_1Y6M  WITH KEY MATNR = <OUT>-MATNR WERKS = <OUT>-WERKS.
      READ TABLE IT_1Y6M_2Y INTO WA_1Y6M_2Y WITH KEY MATNR = <OUT>-MATNR WERKS = <OUT>-WERKS.
      READ TABLE IT_2Y_2Y6M INTO WA_2Y_2Y6M WITH KEY MATNR = <OUT>-MATNR WERKS = <OUT>-WERKS.
    ENDIF.

    "READ MATERIAL PRICE
*    READ TABLE IT_PRIC INTO WA_PRIC WITH KEY MATNR = <OUT>-MATNR BWKEY = <OUT>-WERKS.

    TMP_60    = <OUT>-LBKUM - <OUT>-LBKUM_30.
    TMP_90    = TMP_60      - WA_3160-LBKUM.
    TMP_120   = TMP_90      - WA_6190-LBKUM.
    TMP_150   = TMP_120     - WA_91120-LBKUM.
    TMP_180   = TMP_150     - WA_121150-LBKUM.
    TMP_360   = TMP_180     - WA_151180-LBKUM.
    TMP_999   = TMP_360     - WA_181360-LBKUM.

    IF P_EXTEND = 'X'.
      TMP_1Y6M  = TMP_360     - WA_181360-LBKUM.
      TMP_2Y    = TMP_1Y6M    - WA_1Y_1Y6M-LBKUM.
      TMP_2Y6M  = TMP_2Y    - WA_1Y6M_2Y-LBKUM.
      TMP_999   = TMP_2Y6M    - WA_2Y_2Y6M-LBKUM.  "OVERWIRE TMP_999
    ENDIF.

    TMP_60V    = <OUT>-SALK3 - <OUT>-SALK3_30.
    TMP_90V    = TMP_60V     - WA_3160-SALK3.
    TMP_120V   = TMP_90V     - WA_6190-SALK3.
    TMP_150V   = TMP_120V    - WA_91120-SALK3.
    TMP_180V   = TMP_150V    - WA_121150-SALK3.
    TMP_360V   = TMP_180V    - WA_151180-SALK3.
    TMP_999V   = TMP_360V    - WA_181360-SALK3.

    IF P_EXTEND = 'X'.
      TMP_1Y6MV  = TMP_360V  - WA_181360-SALK3.
      TMP_2YV    = TMP_1Y6MV - WA_1Y_1Y6M-SALK3.
      TMP_2Y6MV  = TMP_2YV - WA_1Y6M_2Y-SALK3.
      TMP_999V   = TMP_2Y6MV - WA_2Y_2Y6M-SALK3.  "OVERWIRE TMP_999V
    ENDIF.
**********************************************************************
"CALCULATE AVERAGE PRICE
**********************************************************************

    "EXIT IF RECIETS IS LESS THAN CURRENT STOCK
    IF <OUT>-LBKUM_30 > <OUT>-LBKUM.
      <OUT>-LBKUM_30 = <OUT>-LBKUM.
      <OUT>-SALK3_30 = <OUT>-SALK3.
      CONTINUE.
    ENDIF.
*"31-60
    IF TMP_60 > WA_3160-LBKUM.
       <OUT>-LBKUM_60 = WA_3160-LBKUM .
       <OUT>-SALK3_60 = WA_3160-SALK3 .
    ELSE.
       <OUT>-LBKUM_60 = TMP_60 .
       <OUT>-SALK3_60 = TMP_60V .
       CONTINUE.
    ENDIF.

*"61-90
    IF TMP_90 > WA_6190-LBKUM.
       <OUT>-LBKUM_90 = WA_6190-LBKUM .
       <OUT>-SALK3_90 = WA_6190-SALK3 .
    ELSE.
       <OUT>-LBKUM_90 = TMP_90 .
       <OUT>-SALK3_90 = TMP_90V .
       CONTINUE.
    ENDIF.

*"91_120
    IF TMP_120 > WA_91120-LBKUM.
       <OUT>-LBKUM_120 = WA_91120-LBKUM.
       <OUT>-SALK3_120 = WA_91120-SALK3.
    ELSE.
       <OUT>-LBKUM_120 = TMP_120 .
       <OUT>-SALK3_120 = TMP_120V .
       CONTINUE.
    ENDIF.

*"121_150
    IF TMP_150 > WA_121150-LBKUM.
       <OUT>-LBKUM_150 = WA_121150-LBKUM.
       <OUT>-SALK3_150 = WA_121150-SALK3.
    ELSE.
       <OUT>-LBKUM_150 = TMP_150 .
       <OUT>-SALK3_150 = TMP_150V .
       CONTINUE.
    ENDIF.

*"151-180
    IF TMP_180 > WA_151180-LBKUM.
       <OUT>-LBKUM_180 = WA_151180-LBKUM.
       <OUT>-SALK3_180 = WA_151180-SALK3.
    ELSE.
       <OUT>-LBKUM_180 = TMP_180.
       <OUT>-SALK3_180 = TMP_180V.
       CONTINUE.
    ENDIF.
*"181-360
    IF TMP_360 > WA_181360-LBKUM.
       <OUT>-LBKUM_360 = WA_181360-LBKUM.
       <OUT>-SALK3_360 = WA_181360-SALK3.
    ELSE.
       <OUT>-LBKUM_360 = TMP_360 .
       <OUT>-SALK3_360 = TMP_360V .
       CONTINUE.
    ENDIF.


      IF P_EXTEND = 'X'.
*      "1Y-1Y6M
            IF TMP_1Y6M > WA_1Y_1Y6M-LBKUM.
               <OUT>-LBKUM_1Y6M = WA_1Y_1Y6M-LBKUM.
               <OUT>-SALK3_1Y6M = WA_1Y_1Y6M-SALK3.
            ELSE.
               <OUT>-LBKUM_1Y6M = TMP_1Y6M .
               <OUT>-SALK3_1Y6M = TMP_1Y6MV .
               CONTINUE.
            ENDIF.
*      "1Y6M-2Y
            IF TMP_2Y > WA_1Y6M_2Y-LBKUM.
               <OUT>-LBKUM_2Y = WA_1Y6M_2Y-LBKUM.
               <OUT>-SALK3_2Y = WA_1Y6M_2Y-SALK3.
            ELSE.
               <OUT>-LBKUM_2Y = TMP_2Y .
               <OUT>-SALK3_2Y = TMP_2YV .
               CONTINUE.
            ENDIF.
*      "2Y-2Y6M
            IF TMP_2Y6M > WA_2Y_2Y6M-LBKUM.
               <OUT>-LBKUM_2Y6M = WA_2Y_2Y6M-LBKUM.
               <OUT>-SALK3_2Y6M = WA_2Y_2Y6M-SALK3.
            ELSE.
               <OUT>-LBKUM_2Y6M = TMP_2Y6M .
               <OUT>-SALK3_2Y6M = TMP_2Y6MV .
               CONTINUE.
            ENDIF.
      ENDIF.

*"360-999
      <OUT>-LBKUM_999 = TMP_999 .
      <OUT>-SALK3_999 = TMP_999V .
ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  POPULATE_RSPAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM POPULATE_RSPAR_INIT .

  REFRESH: IT_RSPAR, R_DAT.

   "GET MATERIAL TYPE DATA
  SELECT DISTINCT MARA~MATNR
         MARA~MTART
         T134T~MTBEZ
         MARA~WRKST
    FROM MARA INNER JOIN T134T ON MARA~MTART = T134T~MTART AND
                                 T134T~SPRAS = SY-LANGU
      INNER JOIN MARC ON MARC~MATNR = MARA~MATNR
    INTO TABLE IT_MTART
    WHERE MARA~MATNR IN S_MATNR AND
          MARA~MTART IN S_MTART AND
          MARC~WERKS IN S_WERKS.

IF P_CVALUE = 'X'.
  SELECT DISTINCT MBEWH~MATNR
         BWKEY
         VPRSV
         VERPR
         STPRS
    FROM MBEWH INNER JOIN MARA ON MARA~MATNR = MBEWH~MATNR
    INTO TABLE IT_MBEW
    WHERE MBEWH~MATNR IN S_MATNR AND
          MTART IN S_MTART AND
          BWKEY IN S_WERKS AND
          LFGJA = P_DATE+0(4) AND
          LFMON = P_DATE+4(2)
    ORDER BY MBEWH~MATNR
             BWKEY.
ENDIF.

"IF MATERIAL FILTER IS ON
IF S_MATNR-LOW IS NOT INITIAL.
  LOOP AT S_MATNR.
    IS_RSPAR-SELNAME = 'MATNR'.
    IS_RSPAR-KIND = 'S'.
    IS_RSPAR-LOW = S_MATNR-LOW."'1000'.
    IS_RSPAR-HIGH = S_MATNR-HIGH."'1000'.
    IS_RSPAR-SIGN = S_MATNR-SIGN."'I'.
    IS_RSPAR-OPTION = S_MATNR-OPTION."'EQ'.
    append IS_RSPAR to IT_RSPAR.
    clear : IS_RSPAR.
  ENDLOOP.
"IF MATERIAL TYPE FILTER IS ON
ELSEIF S_MTART-LOW IS NOT INITIAL.
  LOOP AT IT_MTART INTO WA_MTART.
    IS_RSPAR-SELNAME = 'MATNR'.
    IS_RSPAR-KIND = 'S'.
    IS_RSPAR-LOW = WA_MTART-MATNR."'1000'.
    IS_RSPAR-HIGH = ''."'1000'.
    IS_RSPAR-SIGN = 'I'.
    IS_RSPAR-OPTION = 'EQ'.
    append IS_RSPAR to IT_RSPAR.
    clear : IS_RSPAR.
  ENDLOOP.
ELSE.
  IS_RSPAR-SELNAME = 'MATNR'.
  IS_RSPAR-KIND = 'S'.
  IS_RSPAR-LOW = '00000000000001'.
  IS_RSPAR-HIGH = '99999999999999'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'BT'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.
ENDIF.

LOOP AT S_WERKS.
  IS_RSPAR-SELNAME = 'WERKS'.
  IS_RSPAR-KIND = 'S'.
  IS_RSPAR-LOW = S_WERKS-LOW."'1000'.
  IS_RSPAR-HIGH = S_WERKS-HIGH."'1000'.
  IS_RSPAR-SIGN = S_WERKS-SIGN."'I'.
  IS_RSPAR-OPTION = S_WERKS-OPTION."'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.
ENDLOOP.

  IS_RSPAR-SELNAME = 'DATUM'.
  IS_RSPAR-KIND = 'S'.
  IS_RSPAR-LOW = P_DATE.
*  IS_RSPAR-HIGH = P_DATE.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.
*
  "VALUATED STOCK
  IS_RSPAR-SELNAME = 'BWBST'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.
*
  "Storage loc./batch stock
  IS_RSPAR-SELNAME = 'LGBST'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = ''.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  "Special stock
  IS_RSPAR-SELNAME = 'SBBST'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = ''.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  "TOTALS ONLY - NON HIERARCHY
  IS_RSPAR-SELNAME = 'PA_SUMFL'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

*  "TOTALS ONLY - NON HIERARCHY LAYOUT
  IS_RSPAR-SELNAME = 'PA_SFLVA'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = '/MAT_AGEING'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.


  "Totals only - HIERARCHY REPRESENTATION
  IS_RSPAR-SELNAME = 'XSUM'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = ''.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

*  "Totals only - HIERARCHY REPRESENTATION LAYOUT
  IS_RSPAR-SELNAME = 'PA_SUVAR'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = ''.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  "Only Matls Handled in Batches
  IS_RSPAR-SELNAME = 'XCHAR'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = ''.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  "Also batches w/o stock segment
  IS_RSPAR-SELNAME = 'XNOMCHB'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = ''.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  "No reversal Movement
  IS_RSPAR-SELNAME = 'NOSTO'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = ''.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

*******Scope of List
  IS_RSPAR-SELNAME = 'PA_WDZER'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_WDZEW'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_WDWIZ'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_WDWUW'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_WDWEW'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_NDZER'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_NDSTO'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  POPULATE_RSPAR_ITEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM POPULATE_RSPAR_ITEM USING P_MON TYPE CHAR20.

  REFRESH: IT_RSPAR, R_DAT.
  DATA : F_DATE TYPE DATUM,
         T_DATE TYPE DATUM.
"IF MATERIAL FILTER IS ON
IF S_MATNR-LOW IS NOT INITIAL.
  LOOP AT S_MATNR.
    IS_RSPAR-SELNAME = 'MATNR'.
    IS_RSPAR-KIND = 'S'.
    IS_RSPAR-LOW = S_MATNR-LOW."'1000'.
    IS_RSPAR-HIGH = S_MATNR-HIGH."'1000'.
    IS_RSPAR-SIGN = S_MATNR-SIGN."'I'.
    IS_RSPAR-OPTION = S_MATNR-OPTION."'EQ'.
    append IS_RSPAR to IT_RSPAR.
    clear : IS_RSPAR.
  ENDLOOP.
"IF MATERIAL TYPE FILTER IS ON
ELSEIF S_MTART-LOW IS NOT INITIAL.
  LOOP AT IT_MTART INTO WA_MTART.
    IS_RSPAR-SELNAME = 'MATNR'.
    IS_RSPAR-KIND = 'S'.
    IS_RSPAR-LOW = WA_MTART-MATNR."'1000'.
    IS_RSPAR-HIGH = ''."'1000'.
    IS_RSPAR-SIGN = 'I'.
    IS_RSPAR-OPTION = 'EQ'.
    append IS_RSPAR to IT_RSPAR.
    clear : IS_RSPAR.
  ENDLOOP.
ELSE.
  IS_RSPAR-SELNAME = 'MATNR'.
  IS_RSPAR-KIND = 'S'.
  IS_RSPAR-LOW = '00000000000001'.
  IS_RSPAR-HIGH = '99999999999999'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'BT'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.
ENDIF.


  LOOP AT S_WERKS.
    IS_RSPAR-SELNAME = 'WERKS'.
    IS_RSPAR-KIND = 'S'.
    IS_RSPAR-LOW = S_WERKS-LOW."'1000'.
    IS_RSPAR-HIGH = S_WERKS-HIGH."'1000'.
    IS_RSPAR-SIGN = S_WERKS-SIGN."'I'.
    IS_RSPAR-OPTION = S_WERKS-OPTION."'EQ'.
    append IS_RSPAR to IT_RSPAR.
    clear : IS_RSPAR.
  ENDLOOP.


  CASE P_MON.
    WHEN '00_30'.
    "GET 30 DAYS BACK
  F_DATE = P_DATE.
    CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
      EXPORTING
        DATE            = F_DATE
        DAYS            = '0'
        MONTHS          = '1'
        SIGNUM          = '-'
        YEARS           ='0'
     IMPORTING
       CALC_DATE       = T_DATE
            .
     XD = T_DATE.
    WHEN '31_60'.
      F_DATE = XD - 1.
     "GET DAYS BACK
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE            = F_DATE
          DAYS            = '0'
          MONTHS          = '1'
          SIGNUM          = '-'
          YEARS           ='0'
       IMPORTING
         CALC_DATE       = T_DATE
                .
     XD1 = T_DATE.
    WHEN '61_90'.
      F_DATE = XD1 - 1.
     "GET DAYS BACK
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE            = F_DATE
          DAYS            = '0'
          MONTHS          = '1'
          SIGNUM          = '-'
          YEARS           ='0'
       IMPORTING
         CALC_DATE       = T_DATE
                .
     XD2 = T_DATE.
    WHEN '91_120'.
     F_DATE = XD2 - 1.
     "GET DAYS BACK
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE            = F_DATE
          DAYS            = '0'
          MONTHS          = '1'
          SIGNUM          = '-'
          YEARS           ='0'
       IMPORTING
         CALC_DATE       = T_DATE
                .
     XD3 = T_DATE.
    WHEN '121_150'.
     F_DATE = XD3 - 1.
     "GET DAYS BACK
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE            = F_DATE
          DAYS            = '0'
          MONTHS          = '1'
          SIGNUM          = '-'
          YEARS           ='0'
       IMPORTING
         CALC_DATE       = T_DATE
                .
     XD4 = T_DATE.
    WHEN '151_180'.
     F_DATE = XD4 - 1.
     "GET DAYS BACK
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE            = F_DATE
          DAYS            = '0'
          MONTHS          = '1'
          SIGNUM          = '-'
          YEARS           ='0'
       IMPORTING
         CALC_DATE       = T_DATE
                .
     XD5 = T_DATE.
    WHEN '181_360'.
     F_DATE = XD5 - 1.
     "GET DAYS BACK
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE            = F_DATE
          DAYS            = '0'
          MONTHS          = '6'
          SIGNUM          = '-'
          YEARS           ='0'
       IMPORTING
         CALC_DATE       = T_DATE
                .
     XD6 = T_DATE.
    WHEN '1Y_1Y6M'.   "IBRAHEM 09/04/2017 - ADDED BECAUSE OF E&Y AUDITING FOR PRO
     F_DATE = XD6 - 1.
     "GET DAYS BACK
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE            = F_DATE
          DAYS            = '0'
          MONTHS          = '6'
          SIGNUM          = '-'
          YEARS           ='0'
       IMPORTING
         CALC_DATE       = T_DATE
                .
     XD7 = T_DATE.
    WHEN '1Y6M_2Y'.    "IBRAHEM 09/04/2017 - ADDED BECAUSE OF E&Y AUDITING FOR PRO
     F_DATE = XD7 - 1.
     "GET DAYS BACK
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE            = F_DATE
          DAYS            = '0'
          MONTHS          = '6'
          SIGNUM          = '-'
          YEARS           ='0'
       IMPORTING
         CALC_DATE       = T_DATE
                .
     XD8 = T_DATE.
    WHEN '2Y_2Y6M'.    "IBRAHEM 09/04/2017 - ADDED BECAUSE OF E&Y AUDITING FOR PRO
     F_DATE = XD8 - 1.
     "GET DAYS BACK
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          DATE            = F_DATE
          DAYS            = '0'
          MONTHS          = '6'
          SIGNUM          = '-'
          YEARS           ='0'
       IMPORTING
         CALC_DATE       = T_DATE
                .
     XD9 = T_DATE.
    WHEN OTHERS.
      MESSAGE 'ERROR IN PERIOD CHECK YOUR ABAP CODE' TYPE 'E'.
  ENDCASE.

  IS_RSPAR-SELNAME = 'DATUM'.
  IS_RSPAR-KIND = 'S'.
  IS_RSPAR-LOW = T_DATE."'1000'.
  IS_RSPAR-HIGH = F_DATE."'1000'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'BT'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  "get date for stock-out calculation
  R_DAT-LOW = T_DATE."'1000'.
  R_DAT-HIGH = F_DATE."'1000'.
  R_DAT-SIGN = 'I'.
  R_DAT-OPTION = 'BT'.
  APPEND R_DAT.
  CLEAR R_DAT.

  "VALUATED STOCK
  IS_RSPAR-SELNAME = 'BWBST'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.
*
  "Storage loc./batch stock
  IS_RSPAR-SELNAME = 'LGBST'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = ''.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  "Special stock
  IS_RSPAR-SELNAME = 'SBBST'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = ''.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  "TOTALS ONLY - NON HIERARCHY
  IS_RSPAR-SELNAME = 'PA_SUMFL'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

*  "TOTALS ONLY - NON HIERARCHY LAYOUT
  IS_RSPAR-SELNAME = 'PA_SFLVA'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = '/MAT_AGEING'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

*******Scope of List
  IS_RSPAR-SELNAME = 'PA_WDZER'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_WDZEW'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_WDWIZ'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_WDWUW'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_WDWEW'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_NDZER'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.

  IS_RSPAR-SELNAME = 'PA_NDSTO'.
  IS_RSPAR-KIND = 'P'.
  IS_RSPAR-LOW = 'X'.
  IS_RSPAR-SIGN = 'I'.
  IS_RSPAR-OPTION = 'EQ'.
  append IS_RSPAR to IT_RSPAR.
  clear : IS_RSPAR.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_INITIAL_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_INITIAL_DATA .

  submit RM07MLBD with selection-table IT_RSPAR exporting list to memory and return.

  CALL FUNCTION 'LIST_FROM_MEMORY'
    TABLES
      listobject = it_list
    EXCEPTIONS
      not_found  = 1
      others     = 2.

  CALL FUNCTION 'LIST_TO_ASCI'
    TABLES
      listasci   = it_list1
      listobject = it_list.

  LOOP AT it_list1 INTO WA_LIST1.
    IF WA_LIST1 CS '------' OR SY-TABIX = 2 .
      CONTINUE.
    ELSE.
      SPLIT WA_LIST1 AT '|' INTO DUMMY WA_TMP-MATNR WA_OUT-MAKTX WA_TMP-WERKS
                                 WA_TMP-CLBKUM WA_TMP-INLBKUM WA_TMP-CSALK3 WA_TMP-INSALK3 DUMMY.

      CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
        EXPORTING
          INPUT              = WA_TMP-MATNR
       IMPORTING
         OUTPUT             = WA_OUT-MATNR
       EXCEPTIONS
         LENGTH_ERROR       = 1
         OTHERS             = 2
                .

      WA_OUT-WERKS = WA_TMP-WERKS.
      REPLACE ALL OCCURRENCES OF ',' IN WA_TMP-CLBKUM WITH ''.
      REPLACE ALL OCCURRENCES OF ',' IN WA_TMP-CSALK3 WITH ''.
      WA_OUT-LBKUM = WA_TMP-CLBKUM.
      WA_OUT-SALK3 = WA_TMP-CSALK3.

      DATA WA_MTART LIKE LINE OF IT_MTART.
      READ TABLE IT_MTART INTO WA_MTART WITH KEY MATNR = WA_OUT-MATNR.
      IF SY-SUBRC = 0.
        WA_OUT-MTART = WA_MTART-MTART.
        WA_OUT-MTBEZ = WA_MTART-MTBEZ.
        WA_OUT-WRKST = WA_MTART-WRKST.
        CLEAR WA_MTART.
      ENDIF.

      APPEND WA_OUT TO IT_OUT.
      CLEAR: WA_OUT, WA_TMP.
    ENDIF.
    CLEAR WA_LIST1.
  ENDLOOP.
REFRESH: it_list1, IT_LIST.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  INITIAL_INFO_MSG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM INITIAL_INFO_MSG .

   "VALIDATE ON USER DECIMAL FORMAT
 SELECT SINGLE DCPFM
   FROM USR01
   INTO @DATA(DEC_FORMT)
   WHERE BNAME = @SY-UNAME.

  IF DEC_FORMT <> 'X'.
    MESSAGE 'User Decimal setting should be in format 1,234,567.89 (T-Code: SU01)' TYPE 'E' DISPLAY LIKE 'I'.
  ENDIF.

DATA IT_FINAL TYPE TABLE OF CHAR100.
APPEND '- This report is based on MB5B report.' TO IT_FINAL.
APPEND '- This report is to mimic FIFO inventory movement.' TO IT_FINAL.
APPEND '- It is using /MAT_AGEING layout in Totals Only - Non-Hierarchical' TO IT_FINAL.
APPEND '  Representation.' TO IT_FINAL.
APPEND '- It is considering only Stock-in valuated materials movements to build ageing' TO IT_FINAL.
APPEND '  for material.' TO IT_FINAL.
APPEND '- In case of using (Ignore MVT) option, take care that if the ignored qty is' TO IT_FINAL.
APPEND '  more than Stock-in qty, report will automatically discard your choice for' TO IT_FINAL.
APPEND '  this period.' TO IT_FINAL.

call function 'POPUP_WITH_TABLE_DISPLAY_OK'
      exporting
        endpos_col   = 100
        endpos_row   = 15
        startpos_col = 5
        startpos_row = 2
        titletext    = TEXT-002
      tables
        valuetab     = it_final
      exceptions
        break_off    = 1
        others       = 2.
    if sy-subrc <> 0.
 MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    endif.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FILL_CTRL_TABLE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_CTRL_TABLE .

    wa_ctrl-RSPAR = '00_30'.
    APPEND wa_ctrl TO IT_CTRL.
    CLEAR wa_ctrl.

    wa_ctrl-RSPAR = '31_60'.
    APPEND wa_ctrl TO IT_CTRL.
    CLEAR wa_ctrl.

    wa_ctrl-RSPAR = '61_90'.
    APPEND wa_ctrl TO IT_CTRL.
    CLEAR wa_ctrl.

    wa_ctrl-RSPAR = '91_120'.
    APPEND wa_ctrl TO IT_CTRL.
    CLEAR wa_ctrl.

    wa_ctrl-RSPAR = '121_150'.
    APPEND wa_ctrl TO IT_CTRL.
    CLEAR wa_ctrl.

    wa_ctrl-RSPAR = '151_180'.
    APPEND wa_ctrl TO IT_CTRL.
    CLEAR wa_ctrl.

    wa_ctrl-RSPAR = '181_360'.
    APPEND wa_ctrl TO IT_CTRL.
    CLEAR wa_ctrl.

  IF P_EXTEND = 'X'.
    wa_ctrl-RSPAR = '1Y_1Y6M'.
    APPEND wa_ctrl TO IT_CTRL.
    CLEAR wa_ctrl.

    wa_ctrl-RSPAR = '1Y6M_2Y'.
    APPEND wa_ctrl TO IT_CTRL.
    CLEAR wa_ctrl.

    wa_ctrl-RSPAR = '2Y_2Y6M'.
    APPEND wa_ctrl TO IT_CTRL.
    CLEAR wa_ctrl.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_CTRL  text
*----------------------------------------------------------------------*
FORM GET_DATA  USING P_WA_CTRL TYPE CTRL.

  PERFORM POPULATE_RSPAR_ITEM USING P_WA_CTRL-RSPAR.
  submit RM07MLBD with selection-table IT_RSPAR exporting list to memory and return.

  CALL FUNCTION 'LIST_FROM_MEMORY'
    TABLES
      listobject = it_list
    EXCEPTIONS
      not_found  = 1
      others     = 2.

  CALL FUNCTION 'LIST_TO_ASCI'
    TABLES
      listasci   = it_list1
      listobject = it_list.

  LOOP AT it_list1 INTO WA_LIST1.
    IF WA_LIST1 CS '------' OR SY-TABIX = 2 .
      CONTINUE.
    ELSE.
      SPLIT WA_LIST1 AT '|' INTO DUMMY WA_TMP-MATNR WA_OUT-MAKTX WA_TMP-WERKS
                                 DUMMY WA_TMP-INLBKUM DUMMY WA_TMP-INSALK3 DUMMY.

      CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
        EXPORTING
          INPUT              = WA_TMP-MATNR
       IMPORTING
         OUTPUT             = WA_TMP-MATNR
       EXCEPTIONS
         LENGTH_ERROR       = 1
         OTHERS             = 2
                .
      REPLACE ALL OCCURRENCES OF ',' IN WA_TMP-INLBKUM WITH ''.
      REPLACE ALL OCCURRENCES OF ',' IN WA_TMP-INSALK3 WITH ''.

      "SUBTRACT QUANTITIES FOR SPECIFIC MOVEMENT TYPES
      IF S_BWART-LOW IS NOT INITIAL.
        SELECT SUM( MENGE ) AS QTY , SUM( DMBTR ) AS VALU
          FROM MSEG
          INTO @DATA(TMP_MSEG)
          WHERE MATNR = @WA_TMP-MATNR AND
                WERKS = @WA_TMP-WERKS AND
                BWART IN @S_BWART AND
                BUDAT_MKPF IN @R_DAT AND
                SHKZG = 'S' AND "DEBIT ONLY
                XAUTO = ''.  
          IF SY-SUBRC = 0.
            IF WA_TMP-INLBKUM >= TMP_MSEG-QTY.
              WA_TMP-INLBKUM = WA_TMP-INLBKUM - TMP_MSEG-QTY.
            ENDIF.
            IF WA_TMP-INSALK3 >= TMP_MSEG-VALU.
              WA_TMP-INSALK3 = WA_TMP-INSALK3 - TMP_MSEG-VALU.
            ENDIF.
          ENDIF.
      ENDIF.

      "OVERWRITE WIT CURRENT PRICE IN CASE OF AVG MATERIAL PRICE IS USED FOR VALUATION
      IF P_CVALUE = 'X'.
        READ TABLE IT_MBEW INTO WA_MBEW WITH TABLE KEY MATNR = WA_TMP-MATNR BWKEY = WA_TMP-WERKS.
        IF SY-SUBRC = 0.
          CASE WA_MBEW-VPRSV.
            WHEN 'S'.
              WA_TMP-INSALK3 = WA_TMP-INLBKUM * WA_MBEW-STPRS.
            WHEN 'V'.
              WA_TMP-INSALK3 = WA_TMP-INLBKUM * WA_MBEW-VERPR.
            WHEN OTHERS.
              DATA CUR_PRICE LIKE MBEW-STPRS.
              READ TABLE IT_OUT INTO WA_OUT WITH KEY MATNR = WA_TMP-MATNR WERKS = WA_TMP-WERKS.
              IF SY-SUBRC = 0 AND WA_OUT-LBKUM <> 0.
                CUR_PRICE = WA_OUT-SALK3 / WA_OUT-LBKUM.
                WA_TMP-INSALK3 = WA_TMP-INLBKUM * CUR_PRICE.
              ENDIF.
          ENDCASE.
        ELSE.
          "GET THE UNIT PRICE OF THE KEY DATE STOCK
          READ TABLE IT_OUT INTO WA_OUT WITH KEY MATNR = WA_TMP-MATNR WERKS = WA_TMP-WERKS.
          IF SY-SUBRC = 0 AND WA_OUT-LBKUM <> 0.
            CUR_PRICE = WA_OUT-SALK3 / WA_OUT-LBKUM.
            WA_TMP-INSALK3 = WA_TMP-INLBKUM * CUR_PRICE.
          ENDIF.
        ENDIF.
      ENDIF.


      CASE P_WA_CTRL-RSPAR.
        WHEN '00_30'.
          WA_0030-MATNR = WA_TMP-MATNR.
          WA_0030-WERKS = WA_TMP-WERKS.
          WA_0030-LBKUM = WA_TMP-INLBKUM.
          WA_0030-SALK3 = WA_TMP-INSALK3.
          APPEND WA_0030 TO IT_0030.
          CLEAR WA_0030.
        WHEN '31_60'.
          WA_3160-MATNR = WA_TMP-MATNR.
          WA_3160-WERKS = WA_TMP-WERKS.
          WA_3160-LBKUM = WA_TMP-INLBKUM.
          WA_3160-SALK3 = WA_TMP-INSALK3.
          APPEND WA_3160 TO IT_3160.
          CLEAR WA_3160.
        WHEN '61_90'.
          WA_6190-MATNR = WA_TMP-MATNR.
          WA_6190-WERKS = WA_TMP-WERKS.
          WA_6190-LBKUM = WA_TMP-INLBKUM.
          WA_6190-SALK3 = WA_TMP-INSALK3.
          APPEND WA_6190 TO IT_6190.
          CLEAR WA_6190.
        WHEN '91_120'.
          WA_91120-MATNR = WA_TMP-MATNR.
          WA_91120-WERKS = WA_TMP-WERKS.
          WA_91120-LBKUM = WA_TMP-INLBKUM.
          WA_91120-SALK3 = WA_TMP-INSALK3.
          APPEND WA_91120 TO IT_91120.
          CLEAR WA_91120.
        WHEN '121_150'.
          WA_121150-MATNR = WA_TMP-MATNR.
          WA_121150-WERKS = WA_TMP-WERKS.
          WA_121150-LBKUM = WA_TMP-INLBKUM.
          WA_121150-SALK3 = WA_TMP-INSALK3.
          APPEND WA_121150 TO IT_121150.
          CLEAR WA_121150.
        WHEN '151_180'.
          WA_151180-MATNR = WA_TMP-MATNR.
          WA_151180-WERKS = WA_TMP-WERKS.
          WA_151180-LBKUM = WA_TMP-INLBKUM.
          WA_151180-SALK3 = WA_TMP-INSALK3.
          APPEND WA_151180 TO IT_151180.
          CLEAR WA_151180.
        WHEN '181_360'.
          WA_181360-MATNR = WA_TMP-MATNR.
          WA_181360-WERKS = WA_TMP-WERKS.
          WA_181360-LBKUM = WA_TMP-INLBKUM.
          WA_181360-SALK3 = WA_TMP-INSALK3.
          APPEND WA_181360 TO IT_181360.
          CLEAR WA_181360.
        WHEN '1Y_1Y6M'.
          WA_1Y_1Y6M-MATNR = WA_TMP-MATNR.
          WA_1Y_1Y6M-WERKS = WA_TMP-WERKS.
          WA_1Y_1Y6M-LBKUM = WA_TMP-INLBKUM.
          WA_1Y_1Y6M-SALK3 = WA_TMP-INSALK3.
          APPEND WA_1Y_1Y6M TO IT_1Y_1Y6M.
          CLEAR WA_1Y_1Y6M.
        WHEN '1Y6M_2Y'.
          WA_1Y6M_2Y-MATNR = WA_TMP-MATNR.
          WA_1Y6M_2Y-WERKS = WA_TMP-WERKS.
          WA_1Y6M_2Y-LBKUM = WA_TMP-INLBKUM.
          WA_1Y6M_2Y-SALK3 = WA_TMP-INSALK3.
          APPEND WA_1Y6M_2Y TO IT_1Y6M_2Y.
          CLEAR WA_1Y6M_2Y.
        WHEN '2Y_2Y6M'.
          WA_2Y_2Y6M-MATNR = WA_TMP-MATNR.
          WA_2Y_2Y6M-WERKS = WA_TMP-WERKS.
          WA_2Y_2Y6M-LBKUM = WA_TMP-INLBKUM.
          WA_2Y_2Y6M-SALK3 = WA_TMP-INSALK3.
          APPEND WA_2Y_2Y6M TO IT_2Y_2Y6M.
          CLEAR WA_2Y_2Y6M.
      ENDCASE.

      CLEAR: WA_TMP.
    ENDIF.
    CLEAR WA_LIST1.
  ENDLOOP.
REFRESH: it_list1, IT_LIST.
ENDFORM.
